---
-
  include: tests/templates/rebalance.yml, tests/templates/fts.yml, tests/templates/kv.yml

# start json and binary data loading
-
   template: pillowfight
   args: "{{.Orchestrator}}, {{.Bucket}}, -B {{.Scale 100}} -I {{.Scale 10000000}} -t 1, {{.AuthPassword}}"
-
   image: sequoiatools/gideon
   command: "kv --ops {{.Scale 1000}} --create 10 --get 90 --expire 20 --ttl 600  --hosts {{.Orchestrator}} --bucket {{.Bucket}} --sizes 16000"
-
   command: "kv --ops {{.Scale 1000}} --create 30 --get 70 --delete 10 --hosts {{.Orchestrator}} --bucket {{.Bucket}}"
-
   command: "kv --ops {{.Scale 1000}} --create 20 --get 80 --delete 10 --expire 10 --ttl 600  --hosts {{.Orchestrator}} --bucket {{.NthBucket 1}}"

# create upside-down and scorch index on buckets
-
  template: create_index
  args: "{{.FTSNodePort}}, {{.NthBucket 1}}, st_index_upside_down, upside_down"
  wait: true

  template: create_index
  args: "{{.FTSNodePort}}, {{.NthBucket 1}}, st_index_scorch, scorch"
  wait: true

# scale cluster up
-
  template: add_node
  args: "{{.NthDataNode 1}}, (data,fts)"
-
  template: add_node
  args: "{{.NthDataNode 2}}, (data,fts,index,query)"

-
  template: rebalance
  wait: true

# run field matching queries - 50 ops/sec per index
-
  template: query_fts
  args: "{{.FTSNodePort}}, -1, 50, st_index_upside_down, 5F"
-
  template: query_fts
  args: "{{.FTSNodePort}}, -1, 50, st_index_scorch, 0B"

# create fts index with custom child field using result key as type
- template: create_index_with_child_field
  args: "{{.FTSNodePort}}, good_state, default, SUCCESS, state, false, result"
  wait: true

# create fts index with nested type mappings and store results
- template: create_index_with_child_field_nested_type_mapping
  args: "{{.FTSNodePort}}, social, default, gideon, description, profile, status, true"

# scale cluster up more
-
  template: add_node
  args: "{{.NthDataNode 3}}, fts"
-
  template: add_node
  args: "{{.NthDataNode 4}}, (data,fts)"
-
  template: rebalance_out
  args: "{{.NthDataNode 1}}"
-
  template: wait_for_rebalance
  wait: true

# start queries on new indexes

# direct search on state key
- template: query_fts
  args: "{{.FTSNodePort}}, -1, {{.Scale 3}}, good_state, +state:9C, -size 10"

# regex search on subfield profile.status with description exclusion
- template: query_fts
  args: "{{.FTSNodePort}}, -1, {{.Scale 3}}, social, +profile.status:4121*, -size 10"

# scale back down
-
  template: add_node
  args: "{{.NthDataNode 1}}, (data, fts)"
-
  template: rebalance_out
  args: "{{.NthDataNode 2}}"
-
  template: wait_for_rebalance
  wait: true

# failover an fts node
-
  template: failover_node_forced
  args: "{{.Nodes | .Service `fts` | net 0}}"
  wait: true
-
  template: rebalance
  wait: true
-
  template: wait_for_rebalance
  wait: true
-
  # if we have any more inactive nodes then another
  requires: "{{ gt (len (.Nodes | .InActiveNodes)) 0}}"
  template: add_node
  args: "{{.InActiveNode}}, (data,fts)"
-
  template: rebalance
  wait: true
-
  template: wait_for_rebalance
  wait: true
-
   image: sequoiatools/cmd
   entrypoint: sleep
   command: "{{.Scale 100}}"
   wait: true
-
  template: rebalance_stop
-
  template: failover_and_recover
  args: "{{.Nodes | .Service `fts` | net 0}}, delta"
  wait: true
-
  template: wait_for_rebalance
  wait: true
# rebalance out more nodes
-
  template: rebalance_out
  args: "{{.NthDataNode 3}}"
-
  template: wait_for_rebalance
  wait: true
